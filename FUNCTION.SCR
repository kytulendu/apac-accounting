      /
      *    ****    ROUTINES TO HANDLE VARIOUS FUNCTIONS FOR THE
      * 	   S C R E E N ,   K E Y B O A R D   &	 M O U S E
      *
      *    ****    As this routine uses the variables defined in
      * 	   W40.WS, include the following 'COPY W40.WS' in
      * 	   the WORKING-STORAGE SECTION.
      *
       CRT-KBD-MOUSE   SECTION.
      *
      *    ****    S C R E E N   A T T R I B U T E S
      *
       SAVE-ATTRIB.
	     CALL "CBL_READ_SCR_ATTRS" USING SAVE-POS
					     W42-ATTRIB
					     W41-LENGTH
				       RETURNING WS-STATUS.

       SCREEN-ATTRIBUTES-4.
	     CALL "CBL_READ_SCR_ATTRS" USING SAVE-POS
					     W42-ATTRIB4
					     W41-LENGTH
				       RETURNING WS-STATUS.

       RESTORE-ATTRIB.
	     MOVE 2000		 TO W41-LENGTH.
	     CALL "CBL_WRITE_SCR_ATTRS" USING SAVE-POS
					      W42-ATTRIB4
					      W41-LENGTH
					RETURNING WS-STATUS.

       SCREEN-CONTENTS.
	    CALL "CBL_CLEAR_SCR" USING X"20" X"00"
				 RETURNING WS-STATUS.

       SAVE-SCREEN.
	     CALL "CBL_READ_SCR_CHATTRS" USING SAVE-POS
					       W43-SCREEN
					       W42-ATTRIB
					       W41-LENGTH
					 RETURNING WS-STATUS.

       SAVE-SCREEN-2.
	     CALL "CBL_READ_SCR_CHATTRS" USING SAVE-POS
					       W43-SCREEN2
					       W42-ATTRIB2
					       W41-LENGTH
					 RETURNING WS-STATUS.

       SAVE-SCREEN-3.
	     CALL "CBL_READ_SCR_CHATTRS" USING SAVE-POS
					       W43-SCREEN3
					       W42-ATTRIB3
					       W41-LENGTH
					 RETURNING WS-STATUS.

       RESTORE-SCREEN.
	     MOVE 2000		 TO W41-LENGTH.
	     CALL "CBL_WRITE_SCR_CHATTRS" USING SAVE-POS
						W43-SCREEN
						W42-ATTRIB
						W41-LENGTH
					  RETURNING WS-STATUS.

       RESTORE-SCREEN-2.
	     MOVE 2000		 TO W41-LENGTH.
	     CALL "CBL_WRITE_SCR_CHATTRS" USING SAVE-POS
						W43-SCREEN2
						W42-ATTRIB2
						W41-LENGTH
					  RETURNING WS-STATUS.

       RESTORE-SCREEN-3.
	     MOVE 2000		 TO W41-LENGTH.
	     CALL "CBL_WRITE_SCR_CHATTRS" USING SAVE-POS
						W43-SCREEN3
						W42-ATTRIB3
						W41-LENGTH
					  RETURNING WS-STATUS.

       POSITION-MOUSE.
	     MOVE 67		 TO MOUSE-FUNC.
	     CALL X"AF" USING MOUSE-FUNC MOUSE-DETAILS.
	     MOVE SCREEN-COL	 TO STORE-LIN
				    STORE-COL.
	     SUBTRACT 2 	 FROM STORE-LIN.
	     ADD STRING-LENGTH	 TO STORE-COL.
	   IF NOT (MOUSE-Y < TOP-ROW OR > BOTTOM-ROW)
	       IF NOT (MOUSE-X < STORE-LIN OR > STORE-COL)
		   IF MOUSE-Y = SCREEN-LIN
		       MOVE "Y"	 TO MOUSE-ENTER
		   ELSE
		       PERFORM CLEAR-BLOCK
		       MOVE MOUSE-Y
				 TO SCREEN-LIN
		       PERFORM SAVE-ATTR
		       PERFORM MARK-BLOCK.

       MOVE-BLOCK-UP.
	     PERFORM CLEAR-BLOCK.
	   IF SCREEN-LIN > TOP-ROW
	       SUBTRACT 1	 FROM SCREEN-LIN
	   ELSE
	       MOVE BOTTOM-ROW	 TO SCREEN-LIN.
	     PERFORM SAVE-ATTR.
	     PERFORM MARK-BLOCK.

       MOVE-BLOCK-DOWN.
	     PERFORM CLEAR-BLOCK.
	   IF SCREEN-LIN < BOTTOM-ROW
	       ADD 1		 TO SCREEN-LIN
	   ELSE
	       MOVE TOP-ROW	 TO SCREEN-LIN.
	     PERFORM SAVE-ATTR.
	     PERFORM MARK-BLOCK.

       CLEAR-BLOCK.
	     CALL "CBL_WRITE_SCR_ATTRS" USING SCREEN-POSITION
					      ORIGINAL-VID
					      STRING-LENGTH.

       MARK-BLOCK.
	     CALL "CBL_WRITE_SCR_ATTRS" USING SCREEN-POSITION
					      REVERSE-VID
					      STRING-LENGTH.

       SAVE-ATTR.
	     CALL "CBL_READ_SCR_ATTRS" USING SCREEN-POSITION
					     ORIGINAL-VID
					     STRING-LENGTH.
	     PERFORM SET-UP-REVERSE-VID
		     VARYING WS-S1 FROM 1 BY 1
		     UNTIL WS-S1 > STRING-LENGTH.
      *
      *    ****    The following variables are used by the
      * 	   REVERSE VIDEO routine.
      *
      * 	   03  W40-BIN.
      * 	       05  W40-DEC     PIC  9(02)    COMP-X.
      * 	   03  W40-HEX REDEFINES W40-BIN.
      * 	       05  W40-CHAR    PIC  X(01).
      * 	   03  W40-N1	       PIC  9(02)    COMP-X.
      * 	   03  W40-N2	       PIC  9(02)    COMP-X.
      *
       SET-UP-REVERSE-VID.
	     MOVE ORIGINAL-CHAR (WS-S1)
				 TO W40-CHAR.
	     MOVE ZERO		 TO W40-N1 W40-N2.
	  IF W40-DEC > 127
	      SUBTRACT 128	 FROM W40-DEC
	      ADD 8		 TO W40-N2.
	  IF W40-DEC > 63
	      SUBTRACT 64	 FROM W40-DEC
	      ADD 4		 TO W40-N2.
	  IF W40-DEC > 31
	      SUBTRACT 32	 FROM W40-DEC
	      ADD 2		 TO W40-N2.
	  IF W40-DEC > 15
	      SUBTRACT 16	 FROM W40-DEC
	      ADD 1		 TO W40-N2.
	  IF W40-DEC > 7
	      SUBTRACT 8	 FROM W40-DEC
	      ADD 128		 TO W40-N1.
	  IF W40-DEC > 3
	      SUBTRACT 4	 FROM W40-DEC
	      ADD 64		 TO W40-N1.
	  IF W40-DEC > 1
	      SUBTRACT 2	 FROM W40-DEC
	      ADD 32		 TO W40-N1.
	  IF W40-DEC > 0
	      SUBTRACT 1	 FROM W40-DEC
	      ADD 16		 TO W40-N1.
	     ADD W40-N1 W40-N2	 GIVING W40-DEC.
	     MOVE W40-CHAR	 TO REVERSE-CHAR (WS-S1).

       SCREEN-SHADOW.
	     CALL "CBL_READ_SCR_ATTRS" USING SAVE-POS
					     W42-ATTRIB4
					     W41-LENGTH
				       RETURNING WS-STATUS.
	     ADD SHADE-COL SHADE-WIDTH
				 GIVING WS-S2.
	     ADD 1 WS-S2	 GIVING WS-S3.
	     ADD SHADE-LINES SHADE-ROW
				 GIVING WS-S4.
	     PERFORM SET-UP-SHADOW-VERT
		     VARYING WS-S1 FROM SHADE-ROW BY 1
		     UNTIL WS-S1 = WS-S4.
	     PERFORM SET-UP-SHADOW-HOR
		     VARYING WS-S2 FROM SHADE-COL BY 1
		     UNTIL WS-S2 > WS-S3.
	     CALL "CBL_WRITE_SCR_ATTRS" USING SAVE-POS
					      W42-ATTRIB4
					      W41-LENGTH
					RETURNING WS-STATUS.

       SET-UP-SHADOW-VERT.
	     MOVE SHADE-CHAR	 TO W42-CHR (WS-S1, WS-S2)
				    W42-CHR (WS-S1, WS-S3).

       SET-UP-SHADOW-HOR.
	     MOVE SHADE-CHAR	 TO W42-CHR (WS-S1, WS-S2).

       MESSAGE-INST.
	     DISPLAY CLEAR-L25.
001020	     DISPLAY "Use " AT 2524 WITH BACKGROUND-COLOR 3
					 FOREGROUND-COLOR 1
		     " " WITH FOREGROUND-COLOR 6 HIGHLIGHT
				BACKGROUND-COLOR 3
001030		     " to move the message window"
		      WITH BACKGROUND-COLOR 3
			   FOREGROUND-COLOR 1.

       HIDE-THE-CURSOR.
	     MOVE 255		 TO CUR-ROW CUR-COL.
	     CALL "CBL_SET_CSR_POS" USING CUR-CONT
				    RETURNING WS-STATUS.

       DISPLAY-THE-CURSOR.
	     MOVE 25		 TO CUR-ROW.
	     MOVE 01		 TO CUR-COL.
	     CALL "CBL_SET_CSR_POS" USING CUR-CONT
				    RETURNING WS-STATUS.
